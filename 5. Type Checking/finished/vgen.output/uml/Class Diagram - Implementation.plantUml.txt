' Generated with VGen 2.0.0

@startuml

class Position {
    +int getLine()
    +int getColumn()
    +boolean lessThan(Position other)
    +boolean greaterThan(Position other)
}

interface AST {
    +updatePositions(Object... children)
    +updatePositions(Position start, Position end)
    +Object accept(Visitor visitor, Object param)
}

AST *-[#404040,thickness=1]- Position : start >
AST *-[#404040,thickness=1]- Position : end >


interface Expression {
	..<color:#3366cc> TypeChecking </color>..
	+<color:#3366cc>boolean lvalue</color>
}
AST <|-[#808080]- Expression
abstract AbstractExpression
Expression <|-[#808080]- AbstractExpression
AbstractAST <|-[#808080]- AbstractExpression
Expression -[#3366cc,thickness=3]-  Type #text:3366cc : type >

interface Statement {
}
AST <|-[#808080]- Statement
abstract AbstractStatement
Statement <|-[#808080]- AbstractStatement
AbstractAST <|-[#808080]- AbstractStatement

interface Type {
}
AST <|-[#808080]- Type
abstract AbstractType
Type <|-[#808080]- AbstractType
AbstractAST <|-[#808080]- AbstractType

interface AST {
}
abstract AbstractAST
AST <|-[#808080]- AbstractAST

class Program {
}
AbstractAST <|-[#808080]- Program
Program o-[#404040,thickness=2]- "✱" VarDefinition : varDefinitions >
Program o-[#404040,thickness=2]- "✱" Statement : statements >

class VarDefinition {
	+String name
}
AbstractAST <|-[#808080]- VarDefinition
VarDefinition o-[#404040,thickness=2]-  Type : type >

class IntType {
}
AbstractType <|-[#808080]- IntType

class FloatType {
}
AbstractType <|-[#808080]- FloatType

class Print {
}
AbstractStatement <|-[#808080]- Print
Print o-[#404040,thickness=2]-  Expression : expression >

class Assignment {
}
AbstractStatement <|-[#808080]- Assignment
Assignment o-[#404040,thickness=2]-  Expression : left >
Assignment o-[#404040,thickness=2]-  Expression : right >

class Arithmetic {
	+String operator
}
AbstractExpression <|-[#808080]- Arithmetic
Arithmetic o-[#404040,thickness=2]-  Expression : left >
Arithmetic o-[#404040,thickness=2]-  Expression : right >

class Variable {
	+String name
}
AbstractExpression <|-[#808080]- Variable
Variable -[#ff6600,thickness=3]-  VarDefinition #text:ff6600 : varDefinition >

class IntLiteral {
	+int intValue
}
AbstractExpression <|-[#808080]- IntLiteral

class FloatLiteral {
	+float floatValue
}
AbstractExpression <|-[#808080]- FloatLiteral

@enduml
